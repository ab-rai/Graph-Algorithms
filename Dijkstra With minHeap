/*

You can try this question yourself at this link:-  https://www.hackerearth.com/problem/algorithm/dijkstras/description/

Sample input:-
1
5
0 3 2 0 0
3 0 5 3 0
2 5 0 0 20
0 3 0 0 4
0 0 20 4 0
0 4

Sample Output:-
10
0 1 3 4

*/



#include <bits/stdc++.h>
using namespace std;
void printResult(int weight,int node,map<int,int> parent)
{
	cout<<weight<<endl;
	vector<int> path;
	while(parent[node]!=-1)
	{
		path.push_back(node);
		node=parent[node];
	}
	path.push_back(node);
	for(int i=path.size()-1;i>=0;i--)
		cout<<path[i]<<" ";
	cout<<endl;
				
}
void dijkstras(vector<vector<int> > & adjMat,int src,int dst)
{
	int n=adjMat.size();
	priority_queue<pair<int,int>,vector<pair<int,int>>, greater<pair<int,int>> > minHeap;
	set<int> visitedNode;
	map<int,int> minDist;
	map<int,int> parent;
	for(int i=0;i<n;i++)
	{
		minHeap.push({INT_MAX,i});
		minDist[i]=INT_MAX;
	}
	minHeap.push({0,src});
	minDist[src]=0;
	parent[src]=-1;
	while(!minHeap.empty())
	{
		pair<int,int> u=minHeap.top(); // u means initial 
		minHeap.pop();
		if(visitedNode.count(u.second)==0)	// means if current u is not visited earlier
		{
			visitedNode.insert(u.second);
			int node=u.second;
			int weight=u.first;
			if(u.second==dst) // when the destination node has been reached print the output
			{
				printResult(weight,node,parent);
				return;
			}
			for(int v=0;v<n;v++)
			{
				int newDist=weight + adjMat[node][v];
				if(adjMat[node][v]!=0 && minDist[v]> newDist)
				{
					minDist[v]=newDist;
					parent[v]=node;
					minHeap.push({newDist,v});
				}
			}
		}
	}
}
int main() {
	int t;
	cin >> t;
	while(t--)
	{
		int n;
		cin>>n;
		vector<vector<int> > adjMat;
		for(int i=0;i<n;i++)
		{
			vector<int> temp;
			for(int j=0;j<n;j++)
			{
				int num;
				cin>>num;
				temp.push_back(num);
			}
			adjMat.push_back(temp);
		}
		int src,dst;
		cin>>src>>dst;
		dijkstras(adjMat,src,dst);
	}
}

// Time Complexity:- O(V+Elog V) where V is the total number of vertex(nodes) and E is the total number of edges
// Space Complexity:- O(V)
